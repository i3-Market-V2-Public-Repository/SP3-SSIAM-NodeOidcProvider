{
  "openapi": "3.0.3",
  "info": {
    "description": "The API of the i3Market OpenID Connect Provider.",
    "version": "0.9.0",
    "title": "i3-market OpenID Connect Provider API",
    "contact": {
      "name": "Fernando Román García, Juan Hernández Serrano",
      "email": "fernando.roman@upc.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "/oidc",
      "description": "Local testing server"
    }
  ],
  "tags": [
    {
      "name": "OIDC Core",
      "description": "The OpenID Connect Core 1.0 defines the core OpenID Connect functionality: authentication built on top of OAuth 2.0 and the use of Claims to communicate information about the End-User. It also describes the security and privacy considerations for using OpenID Connect.\n",
      "externalDocs": {
        "url": "https://openid.net/specs/openid-connect-core-1_0.html"
      }
    },
    {
      "name": "OIDC Discovery",
      "description": "The OpenID Connect Discovery 1.0 specification defines a mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.",
      "externalDocs": {
        "url": "https://openid.net/specs/openid-connect-discovery-1_0.html"
      }
    }
  ],
  "paths": {
    "/.well-known/openid-configuration": {
      "get": {
        "tags": [
          "OIDC Discovery"
        ],
        "summary": "Get OpenID Provider configuration information",
        "description": "Discovery endpoint used by OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.",
        "responses": {
          "200": {
            "description": "The OpenID Provider Metadata values",
            "content": {
              "application/json": {
                "schema": {
                  "title": "OpenIDProviderMetadata",
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "type": "string",
                      "description": "REQUIRED. URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier"
                    },
                    "authorization_endpoint": {
                      "type": "string",
                      "description": "REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint"
                    },
                    "token_endpoint": {
                      "type": "string",
                      "description": "URL of the OP's OAuth 2.0 Token Endpoint. This is REQUIRED unless only the Implicit Flow is used."
                    },
                    "userinfo_endpoint": {
                      "type": "string",
                      "description": "RECOMMENDED. URL of the OP's UserInfo Endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components."
                    },
                    "jwks_uri": {
                      "type": "string",
                      "description": "REQUIRED. URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate."
                    },
                    "registration_endpoint": {
                      "type": "string",
                      "description": "RECOMMENDED. URL of the OP's Dynamic Client Registration Endpoint"
                    },
                    "scopes_supported": {
                      "type": "string",
                      "description": "RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports"
                    },
                    "response_types_supported": {
                      "type": "string",
                      "description": "REQUIRED. JSON array containing a list of the OAuth 2.0 response_type values that this OP supports"
                    },
                    "response_modes_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports"
                    },
                    "grant_types_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports"
                    },
                    "acr_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the Authentication Context Class References that this OP supports"
                    },
                    "subject_types_supported": {
                      "type": "string",
                      "description": "REQUIRED. JSON array containing a list of the Subject Identifier types that this OP supports"
                    },
                    "id_token_signing_alg_values_supported": {
                      "type": "string",
                      "description": "REQUIRED. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT"
                    },
                    "id_token_encryption_alg_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the JWE encryption algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT"
                    },
                    "id_token_encryption_enc_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT"
                    },
                    "userinfo_signing_alg_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT"
                    },
                    "userinfo_encryption_alg_values_supported": {
                      "type": "string",
                      "description": "ROPTIONAL. JSON array containing a list of the JWE encryption algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT"
                    },
                    "userinfo_encryption_enc_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT"
                    },
                    "request_object_signing_alg_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects"
                    },
                    "request_object_encryption_alg_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the JWE encryption algorithms (alg values) supported by the OP for Request Objects"
                    },
                    "request_object_encryption_enc_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects"
                    },
                    "token_endpoint_auth_methods_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of Client Authentication methods supported by this Token Endpoint"
                    },
                    "token_endpoint_auth_signing_alg_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT"
                    },
                    "display_values_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the display parameter values that the OpenID Provider supports"
                    },
                    "claim_types_supported": {
                      "type": "string",
                      "description": "OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports"
                    },
                    "claims_supported": {
                      "type": "string",
                      "description": "RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for"
                    },
                    "service_documentation": {
                      "type": "string",
                      "description": "OPTIONAL. URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider"
                    },
                    "claims_locales_supported": {
                      "type": "string",
                      "description": "OPTIONAL. Languages and scripts supported for values in Claims being returned, represented as a JSON array of BCP47 [RFC5646] language tag values"
                    },
                    "ui_locales_supported": {
                      "type": "string",
                      "description": "OPTIONAL. Languages and scripts supported for the user interface, represented as a JSON array of BCP47 [RFC5646] language tag values"
                    },
                    "claims_parameter_supported": {
                      "type": "boolean",
                      "description": "OPTIONAL. Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support. If omitted, the default value is false"
                    },
                    "request_parameter_supported": {
                      "type": "boolean",
                      "description": "OPTIONAL. Boolean value specifying whether the OP supports use of the request parameter, with true indicating support. If omitted, the default value is false"
                    },
                    "request_uri_parameter_supported": {
                      "type": "boolean",
                      "description": "OPTIONAL. Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support. If omitted, the default value is true"
                    },
                    "require_request_uri_registration": {
                      "type": "boolean",
                      "description": "OPTIONAL. Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter"
                    },
                    "op_policy_uri": {
                      "type": "string",
                      "description": "OPTIONAL. URL that the OpenID Provider provides to the person registering the Client to read about the OP's requirements on how the Relying Party can use the data provided by the OP"
                    },
                    "op_tos_uri": {
                      "type": "boolean",
                      "description": "OPTIONAL. URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's terms of service"
                    }
                  },
                  "required": [
                    "issuer",
                    "authorization_endpoint",
                    "jwks_uri",
                    "response_types_supported",
                    "subject_types_supported",
                    "id_token_signing_alg_values_supported"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/jwks": {
      "get": {
        "tags": [
          "OIDC Core"
        ],
        "summary": "Get JSON Web Key Set",
        "description": "JWKS endpoint containing the public keys used by OpenID Connect Relying Party to verify any JWT issued by the authorization server.",
        "responses": {
          "200": {
            "description": "A JSON object that represents a set of JWKs",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JWKSet",
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "description": "The value of the \"keys\" parameter is an array of JWK values",
                      "items": {
                        "title": "JWK",
                        "type": "object",
                        "properties": {
                          "kty": {
                            "type": "string",
                            "description": "The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\""
                          },
                          "use": {
                            "type": "string",
                            "description": "The \"use\" (public key use) parameter identifies the intended use of the public key"
                          },
                          "key_ops": {
                            "type": "string",
                            "description": "The \"key_ops\" (key operations) parameter identifies the operation(s) for which the key is intended to be used"
                          },
                          "alg": {
                            "type": "string",
                            "description": "The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key"
                          },
                          "kid": {
                            "type": "string",
                            "description": "The \"kid\" (key ID) parameter is used to match a specific key"
                          },
                          "x5u": {
                            "type": "string",
                            "description": "The \"x5u\" (X.509 URL) parameter is a URI [RFC3986] that refers to a resource for an X.509 public key certificate or certificate chain [RFC5280]"
                          },
                          "x5c": {
                            "type": "string",
                            "description": "The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280]"
                          },
                          "x5t": {
                            "type": "string",
                            "description": "The \"x5t\" (X.509 certificate SHA-1 thumbprint) parameter is a base64url-encoded SHA-1 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate [RFC5280]"
                          },
                          "x5t#S256": {
                            "type": "string",
                            "description": "The \"x5t#S256\" (X.509 certificate SHA-256 thumbprint) parameter is a base64url-encoded SHA-256 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate [RFC5280]"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth": {
      "get": {
        "summary": "request authorization code",
        "operationId": "authorizationCode",
        "tags": [
          "OIDC Core"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "REQUIRED. A space-separated list of identity claims to request from the end-user.\n\nOpenID Connect requests MUST contain the `openid` scope value.\n\nIf the openid scope value is not present, the behavior is entirely unspecified.\n\nOther scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "openid"
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "REQUIRED. OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "OAuth 2.0 Client Identifier valid at the Authorization Server.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "client_id1"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "REQUIRED. Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986] (Simple String Comparison). When using this flow, the Redirection URI SHOULD use the https scheme; however, it MAY use the http scheme, provided that the Client Type is confidential, as defined in Section 2.1 of OAuth 2.0, and provided the OP allows the use of http Redirection URIs in this case. The Redirection URI MAY use an alternate scheme, such as one that is intended to identify a callback into a native application",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://mywebapp.com/auth/callback"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "RECOMMENDED. Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "description": "A code challenge derived from the code verifier by using one of the following transformations described in the code_challenge_method.\n\nREQUIRED if using ACG with PKCE extension\n\nIt is RECOMMENDED that the output of a suitable random number generator be used to create a 32-octet sequence. The octet sequence is then base64url-encoded to produce a 43-octet URL safe string to use as the code verifier.\n\nExample code (node.js):\n```javascript\nconst base64url = require(\"base64url\")\nconst crypto = require('crypto')\nconst codeVerifierBuf = crypto.randomBytes(32)\nconst codeVerifier = base64url.encode(codeVerifierBuf)\nconsole.log(codeVerifier)\nconst hash = crypto.createHash('sha256')\n            .update(codeVerifier)\n            .digest();\nconst codeChallenge = base64url.encode(hash)\nconsole.log(codeChallenge)\n```\n",
            "required": false,
            "schema": {
              "maxLength": 128,
              "minLength": 43,
              "pattern": "^[A-Za-z0-9\\-._~]{43,128}$",
              "type": "string"
            },
            "example": "FL_DFs6V30KSJAIq7h_LsAttGYAplaYGdFUkGeN54EE"
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "description": "REQUIRED if using ACG+PKCE\n- 'plain' code_challenge = code_verifier\n- 'S256' code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))\n",
            "required": false,
            "schema": {
              "type": "string",
              "default": "plain",
              "enum": [
                "S256",
                "plain"
              ]
            }
          },
          {
            "name": "response_mode",
            "in": "query",
            "description": "OPTIONAL. Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nonce",
            "in": "query",
            "description": "OPTIONAL. String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token. Sufficient entropy MUST be present in the `nonce` values used to prevent attackers from guessing values. For implementation notes, see Section 15.5.2.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "display",
            "in": "query",
            "description": "OPTIONAL. ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are:\n- `page` The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode.\n- `popup` The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over.\n- `touch` The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface.\n- `wap` The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.\n\nThe Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.\n",
            "required": false,
            "schema": {
              "type": "string",
              "default": "page",
              "enum": [
                "page",
                "popup",
                "touch",
                "wap"
              ]
            }
          },
          {
            "name": "prompt",
            "in": "query",
            "description": "OPTIONAL. Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The defined values are:\n- `none` The Authorization Server MUST NOT display any authentication or consent user interface pages. An error is returned if an End-User is not already authenticated or the Client does not have pre-configured consent for the requested Claims or does not fulfill other conditions for processing the request. The error code will typically be `login_required`, `interaction_required`, or another code defined in Section 3.1.2.6. This can be used as a method to check for existing authentication and/or consent.\n- `login` The Authorization Server SHOULD prompt the End-User for reauthentication. If it cannot reauthenticate the End-User, it MUST return an error, typically `login_required`.\n- `consent` The Authorization Server SHOULD prompt the End-User for consent before returning information to the Client. If it cannot obtain consent, it MUST return an error, typically `consent_required`.\n- `select_account` The Authorization Server SHOULD prompt the End-User to select a user account. This enables an End-User who has multiple accounts at the Authorization Server to select amongst the multiple accounts that they might have current sessions for. If it cannot obtain an account selection choice made by the End-User, it MUST return an error, typically `account_selection_required`.\n\nThe `prompt` parameter can be used by the Client to make sure that the End-User is still present for the current session or to bring attention to the request. If this parameter contains `none` with any other value, an error is returned.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "login",
                "consent",
                "select_account"
              ]
            }
          },
          {
            "name": "max_age",
            "in": "query",
            "description": "OPTIONAL. Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The `max_age` request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] `max_auth_age` request parameter.) When `max_age` is used, the ID Token returned MUST include an `auth_time` Claim Value.",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ui_locales",
            "in": "query",
            "description": "OPTIONAL. End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id_token_hint",
            "in": "query",
            "description": "OPTIONAL. ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as `login_required`. When possible, an `id_token_hint` SHOULD be present when `prompt=none` is used and an `invalid_request` error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an `id_token_hint` value.\n\nIf the ID Token received by the RP from the OP is encrypted, to use it as an `id_token_hint`, the Client MUST decrypt the signed ID Token contained within the encrypted ID Token. The Client MAY re-encrypt the signed ID token to the Authentication Server using a key that enables the server to decrypt the ID Token, and use the re-encrypted ID token as the `id_token_hint` value.\n",
            "required": false,
            "schema": {
              "pattern": "^(([A-Za-z0-9\\-_])+\\.)([A-Za-z0-9\\-_]+)(\\.([A-Za-z0-9\\-_]+))?$",
              "type": "string"
            }
          },
          {
            "name": "login_hint",
            "in": "query",
            "description": "OPTIONAL. Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the `phone_number` Claim. The use of this parameter is left to the OP's discretion.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acr_values",
            "in": "query",
            "description": "OPTIONAL. Requested Authentication Context Class Reference values. Space-separated string that specifies the `acr` values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the `acr` Claim Value, as specified in Section 2. The `acr` Claim is requested as a Voluntary Claim by this parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect the user to perform the authentication or redirect to callback_uri with code or error",
            "headers": {
              "Location": {
                "description": "either an AuthenticationRedirect or an AuthorizationResponseRedirect or an AuthorizationErrorRedirect (look at the schemas for more details)",
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "example": "https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz"
              }
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": [
          "OIDC Core"
        ],
        "summary": "request access token and id token with authorization code or refresh token",
        "description": "The token endpoint is used by the native app or spa to obtain an access token and an id token by presenting its authorization grant (and code verifier if PKCE) or a refresh token. If not using PKCE authentication is REQUIRED.",
        "operationId": "accessToken",
        "requestBody": {
          "description": "The authorization grant and the code verifier",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "AccessTokenRequest",
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "description": "Allowed values are:\n- `authorization_code` when requesting access and id tokens with an authorization code.\n- `refresh_token` when requesting access tokens with a refresh token.\n",
                    "example": "authorization_code",
                    "enum": [
                      "authorization_code",
                      "refresh_token"
                    ]
                  },
                  "code": {
                    "pattern": "^[A-Za-z0-9\\-._~]{43,128}$",
                    "type": "string",
                    "description": "The authorization code received from the authorization server.\n\nREQUIRED if `grant_type` is `authorization_code`; IGNORED otherwise.\n",
                    "example": "FL_DFs6V30KSJAIq7h_LsAttGYAplaYGdFUkGeN54EE"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "REQUIRED, if the `redirect_uri` parameter was included in the authorization request and their values MUST be identical.",
                    "format": "uri",
                    "example": "https://api.server.com/callback"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "the registered client id.\n\nREQUIRED, if the client is not authenticating with the authorization server (e.g. when using PKCE)\n"
                  },
                  "code_verifier": {
                    "maxLength": 128,
                    "minLength": 43,
                    "pattern": "^[A-Za-z0-9\\-._~]{43,128}$",
                    "type": "string",
                    "description": "high-entropy cryptographic random STRING using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\" from Section 2.3 of [RFC3986], with a minimum length of 43 characters and a maximum length of 128 characters.\n\nREQUIRED if using the PCKE extension.\n",
                    "example": "EbWPr9dknKvBDg8r8zRroG82bFZaSqSWeCKjvj_AI1w"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "The refresh token issued to the client.\n\nREQUIRED if `grant_type` is `refresh_token`; IGNORED otherwise.\n"
                  },
                  "scope": {
                    "type": "string",
                    "description": "OPTIONAL if `grant_type` is `refresh_token`; IGNORED otherwise.\n\nThe scope of the access request.  The requested scope MUST NOT include any scope not originally granted by the resource owner, and if omitted is treated as equal to the scope originally granted by the resource owner.\n"
                  }
                },
                "required": [
                  "grant_type"
                ],
                "example": "POST /token HTTP/1.1\n\nHost: server.example.com\n\nContent-Type: application/x-www-form-urlencoded\n\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n\ngrant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the access token and id token",
            "headers": {
              "Cache-Control": {
                "description": "no-store",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-store"
                  ]
                }
              },
              "Pragma": {
                "description": "no-cache",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-cache"
                  ]
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "AccessTokenSuccessfulResponse",
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "The access token issued by the authorization server"
                    },
                    "token_type": {
                      "type": "string",
                      "description": "The type of the token issued. Value is case insensitive. The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes).  The client MUST NOT use an access token if it does not understand the token type.\n\nThe OAuth 2.0 token_type response parameter value MUST be Bearer, as specified in OAuth 2.0 Bearer Token Usage [RFC6750], unless another Token Type has been negotiated with the Client. Servers SHOULD support the Bearer Token Type; use of other Token Types is outside the scope of this specification.\n",
                      "example": "bearer"
                    },
                    "expires_in": {
                      "minimum": 1,
                      "type": "integer",
                      "description": "The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.",
                      "example": 60
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "The refresh token, which can be used to obtain new access tokens using the same authorization grant"
                    },
                    "scope": {
                      "type": "string",
                      "description": "The scope of the access token. OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED."
                    },
                    "id_token": {
                      "type": "string",
                      "description": "ID Token value associated with the authenticated session. The ID Token is represented as a JSON Web Token (JWT)",
                      "format": "^(([A-Za-z0-9\\-_])+\\.)([A-Za-z0-9\\-_]+)(\\.([A-Za-z0-9\\-_]+))?$"
                    }
                  },
                  "required": [
                    "access_token",
                    "id_token",
                    "token_type"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "missing or invalid mandatory parameters",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AccessTokenErrorResponse",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "A single ASCII [USASCII] error code from the following:\n- `invalid_request` The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.\n- `invalid_client` Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).  The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.  If the client attempted to authenticate via the \"Authorization\" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n- `invalid_grant` The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.\n- `unauthorized_client` The authenticated client is not authorized to use this authorization grant type.\n- `unsupported_grant_type` The authorization grant type is not supported by the authorization server.\n- `invalid_scope` The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.\n",
                      "enum": [
                        "invalid_request",
                        "invalid_client",
                        "invalid_grant",
                        "unauthorized_client",
                        "unsupported_grant_type",
                        "invalid_scope"
                      ]
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred."
                    },
                    "error_uri": {
                      "type": "string",
                      "description": "A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.",
                      "format": "uri"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "client authentication failed",
            "headers": {
              "WWW-Authenticate": {
                "description": "If the client attempted to authenticate via the \"Authorization\" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                },
                "example": "basic"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1token/post/responses/400/content/application~1json/schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ClientAuth": []
          },
          {}
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ClientAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
