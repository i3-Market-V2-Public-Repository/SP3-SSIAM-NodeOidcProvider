openapi: '3.0.3'
info:
  description: The API of the i3Market OpenID Connect Provider. 
  version: __VERSION__
  title: i3-market OpenID Connect Provider API

tags:
  - name: OIDC Core
    description: |
      The OpenID Connect Core 1.0 defines the core OpenID Connect functionality: authentication built on top of OAuth 2.0 and the use of Claims to communicate information about the End-User. It also describes the security and privacy considerations for using OpenID Connect.
    externalDocs:
      url: https://openid.net/specs/openid-connect-core-1_0.html
  - name: OIDC Discovery
    description: The OpenID Connect Discovery 1.0 specification defines a mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.
    externalDocs:
      url: https://openid.net/specs/openid-connect-discovery-1_0.html

paths:
  /token:
    post:
      tags:
        - OIDC Core
      summary: request access token and id token with authorization code or refresh token
      description: The token endpoint is used by the native app or spa to obtain an access token and an id token by presenting its authorization grant (and code verifier if PKCE) or a refresh token. If not using PKCE authentication is REQUIRED.
      operationId: accessToken
      requestBody:
        description: The authorization grant and the code verifier
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AccessTokenRequest'
        required: true
      responses:
        "200":
          description: the access token and id token
          headers:
            Cache-Control:
              description: no-store
              style: simple
              explode: false
              schema:
                type: string
                enum:
                - no-store
            Pragma:
              description: no-cache
              style: simple
              explode: false
              schema:
                type: string
                enum:
                - no-cache
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenSuccessfulResponse'
        "400":
          description: missing or invalid mandatory parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenErrorResponse'
        "401":
          description: client authentication failed
          headers:
            WWW-Authenticate:
              description: If the client attempted to authenticate via the "Authorization" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the "WWW-Authenticate" response header field matching the authentication scheme used by the client.
              style: simple
              explode: false
              schema:
                type: string
              example: basic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenErrorResponse'
      security:
      - BasicAuth: []
      - {}

components:
  schemas:
    AccessTokenRequest:
      title: AccessTokenRequest
      type: object
      properties:
        grant_type:
          type: string
          description: |
            Allowed values are:
            - `authorization_code` when requesting access and id tokens with an authorization code.
            - `refresh_token` when requesting access tokens with a refresh token.
          example: authorization_code
          enum:
            - authorization_code
            - refresh_token
        code:
          pattern: ^[A-Za-z0-9\-._~]{43,128}$
          type: string
          description: |
            The authorization code received from the authorization server.

            REQUIRED if `grant_type` is `authorization_code`; IGNORED otherwise.
          example: FL_DFs6V30KSJAIq7h_LsAttGYAplaYGdFUkGeN54EE
        redirect_uri:
          type: string
          description: REQUIRED, if the `redirect_uri` parameter was included in the authorization request and their values MUST be identical.
          format: uri
          example: http://localhost:3001/oidc/cb
        client_id:
          type: string
          description: |
            the registered client id.
            
            REQUIRED, if the client is not authenticating with the authorization server (e.g. when using PKCE)
          example: oidcRpAcg_SpaNativeApps
        code_verifier:
          maxLength: 128
          minLength: 43
          pattern: ^[A-Za-z0-9\-._~]{43,128}$
          type: string
          description: |
            high-entropy cryptographic random STRING using the unreserved characters [A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~" from Section 2.3 of [RFC3986], with a minimum length of 43 characters and a maximum length of 128 characters.

            REQUIRED if using the PCKE extension.
          example: EbWPr9dknKvBDg8r8zRroG82bFZaSqSWeCKjvj_AI1w
        refresh_token:
          type: string
          description: |
            The refresh token issued to the client.

            REQUIRED if `grant_type` is `refresh_token`; IGNORED otherwise.
        scope:
          type: string
          description: |
            OPTIONAL if `grant_type` is `refresh_token`; IGNORED otherwise.
            
            The scope of the access request.  The requested scope MUST NOT include any scope not originally granted by the resource owner, and if omitted is treated as equal to the scope originally granted by the resource owner.
      required:
      - grant_type
      example: |
        POST /token HTTP/1.1

        Host: server.example.com

        Content-Type: application/x-www-form-urlencoded

        Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

        grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb

    AccessTokenSuccessfulResponse:
      title: AccessTokenSuccessfulResponse
      type: object
      properties:
        access_token:
          type: string
          description: The access token issued by the authorization server
        token_type:
          type: string
          description: |
            The type of the token issued. Value is case insensitive. The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes).  The client MUST NOT use an access token if it does not understand the token type.

            The OAuth 2.0 token_type response parameter value MUST be Bearer, as specified in OAuth 2.0 Bearer Token Usage [RFC6750], unless another Token Type has been negotiated with the Client. Servers SHOULD support the Bearer Token Type; use of other Token Types is outside the scope of this specification.
          example: bearer
        expires_in:
          minimum: 1
          type: integer
          description: The lifetime in seconds of the access token.  For example, the value "3600" denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.
          example: 60
        refresh_token:
          type: string
          description: The refresh token, which can be used to obtain new access tokens using the same authorization grant
        scope:
          type: string
          description: The scope of the access token. OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED.
        id_token:
          type: string
          description: ID Token value associated with the authenticated session. The ID Token is represented as a JSON Web Token (JWT)
          format: ^(([A-Za-z0-9\-_])+\.)([A-Za-z0-9\-_]+)(\.([A-Za-z0-9\-_]+))?$
      required:
      - access_token
      - id_token
      - token_type

    AccessTokenErrorResponse:
      title: AccessTokenErrorResponse
      type: object
      properties:
        error:
          type: string
          description: |
            A single ASCII [USASCII] error code from the following:
            - `invalid_request` The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.
            - `invalid_client` Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).  The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.  If the client attempted to authenticate via the "Authorization" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the "WWW-Authenticate" response header field matching the authentication scheme used by the client.
            - `invalid_grant` The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.
            - `unauthorized_client` The authenticated client is not authorized to use this authorization grant type.
            - `unsupported_grant_type` The authorization grant type is not supported by the authorization server.
            - `invalid_scope` The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.
          enum:
          - invalid_request
          - invalid_client
          - invalid_grant
          - unauthorized_client
          - unsupported_grant_type
          - invalid_scope
        error_description:
          type: string
          description: Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred.
        error_uri:
          type: string
          description: A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.
          format: uri
      required:
        - error
  
  securitySchemes:
    BasicAuth:
      $ref: "../../security-schemes/basic.yaml#/basicAuth"
